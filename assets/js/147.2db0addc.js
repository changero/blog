(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{491:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("p",[s._v("之前我一直没有明白"),t("code",[s._v("lint-staged")]),s._v("的作用，觉得这个工具在整个流程中的作用很小，可以完全不需要。后来明白，在工程化体系中，减少哪怕一步操作，也是一个益处")]),s._v(" "),t("p",[s._v("那么具体作用是什么。试想在一个项目中，我们需要在提交代码之前，对代码进行格式化(lint)，然后在"),t("code",[s._v("add")]),s._v("，接着"),t("code",[s._v("commit")]),s._v("。可不可以直接在"),t("code",[s._v("husky")]),s._v("上配置钩子，直接"),t("code",[s._v("lint")]),s._v("呢，当然不行，因为对代码进行格式化之后，文件会修改，而修改之后的更改仍然在"),t("code",[s._v("git工作区")]),s._v("，不能提交到本次"),t("code",[s._v("commit")]),s._v("。所以，如果在一个较大的项目里面，哪怕我们更改一个文件，在提交之前，也需要手动执行一次"),t("code",[s._v("lint")]),s._v("，对所有文件都 lint 一遍。这时候的工作流程是")]),s._v(" "),t("blockquote",[t("p",[s._v("修改文件 -> lint -> git add -> 修改文件 -> lint -> git add -> git commit")])]),s._v(" "),t("p",[t("code",[s._v("lint-staged")]),s._v("的作用就是对提交到"),t("code",[s._v("暂存区")]),s._v("的文件执行对应的命令，比如 lint，这样，当修改一个文件之后，只需要 add 到暂存区就行了。而最佳实践是，通过 husky 配置"),t("code",[s._v("pre-commit")]),s._v("钩子，执行 lint-staged，这时候的流程就变成了")]),s._v(" "),t("blockquote",[t("p",[s._v("修改文件 -> git add -> 修改文件 -> git add -> git commit")])]),s._v(" "),t("p",[s._v("在"),t("code",[s._v("commit")]),s._v("流程之前会自动 lint，并添加到暂存区，然后"),t("code",[s._v("commit")])]),s._v(" "),t("p",[s._v("接下来开始说明"),t("code",[s._v("lint-staged")]),s._v("如何配置")]),s._v(" "),t("h2",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" ling-staged -D\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" lint-staged -D\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),t("p",[s._v("修改"),t("code",[s._v("package.json")])]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"lint-staged"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"src/**/*.js"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lint"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("其他配置文件还有"),t("code",[s._v(".lintstagedrc")]),s._v(", "),t("code",[s._v("lint-staged.config.js")])]),s._v(" "),t("p",[s._v("配置"),t("a",{attrs:{href:"./husky"}},[s._v("husky")]),s._v("，添加"),t("code",[s._v("pre-commit")]),s._v("钩子")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ npx husky "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" .husky/pre-commit "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npx lint-staged"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/jiaoshou/p/12250278.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考文章"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"mrm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mrm"}},[s._v("#")]),s._v(" mrm")]),s._v(" "),t("p",[s._v("mrm 是一个可以根据项目的依赖自动生成配置的工具")]),s._v(" "),t("h3",{attrs:{id:"安装-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-2"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" mrm -D\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),t("p",[s._v("在安装好相应的依赖之后")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ npx mrm package editorconfig gitignore eslint prettier lint-staged\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);